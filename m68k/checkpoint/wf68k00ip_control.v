//-------------------------------------------------------------------
//
//   This file is automatically generated by VHDL to Verilog Translator.
//         Ver.1.24 thanks to T.I. Build May.8.2006
//               www.sugawara-systems.com   
//                    tech-support@sugawara-systems.com
//        See Original Copyright Notice for property of the file .( somewhere in this file.)
//
//--------------------------------------------------------------------


//--------------------------------------------------------------------
//--                                                              ----
//-- MC68000 compatible IP Core					                  ----
//--                                                              ----
//-- This file is part of the SUSKA ATARI clone project.          ----
//-- http://www.experiment-s.de                                   ----
//--                                                              ----
//-- Description:                                                 ----
//-- This model provides an opcode and bus timing compatible ip   ----
//-- core compared to Motorola's MC68000 microprocessor.          ----
//--                                                              ----
//-- This file contains the system control unit.                  ----
//--                                                              ----
//--                                                              ----
//-- Description:                                                 ----
//-- Performs the core synchronization and data flow control.     ----
//-- This module manages execution of all instructions. It con-   ----
//-- tains the status register which consists of two portions     ----
//-- supervisor byte and user byte and its related logic.         ----
//--                                                              ----
//--                                                              ----
//-- Author(s):                                                   ----
//-- - Wolfgang Foerster, wf@experiment-s.de; wf@inventronik.de   ----
//--                                                              ----
//--------------------------------------------------------------------
//--                                                              ----
//-- Copyright (C) 2006 - 2011 Wolfgang Foerster                  ----
//--                                                              ----
//-- This source file is free software; you can redistribute it   ----
//-- and/or modify it under the terms of the GNU General Public   ----
//-- License as published by the Free Software Foundation; either ----
//-- version 2 of the License, or (at your option) any later      ----
//-- version.                                                     ----
//--                                                              ----
//-- This program is distributed in the hope that it will be      ----
//-- useful, but WITHOUT ANY WARRANTY; without even the implied   ----
//-- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      ----
//-- PURPOSE.  See the GNU General Public License for more        ----
//-- details.                                                     ----
//--                                                              ----
//-- You should have received a copy of the GNU General Public    ----
//-- License along with this program; if not, write to the Free   ----
//-- Software Foundation, Inc., 51 Franklin Street, Fifth Floor,  ----
//-- Boston, MA 02110-1301, USA.                                  ----
//--                                                              ----
//--------------------------------------------------------------------
// 
// Revision History
// 
// Revision 2K6B  2006/12/24 WF
//   Initial Release.
// Revision 2K7A  2007/05/31 WF
//   Updated all modules.
// Revision 2K7B  2007/12/24 WF
//   See the 68K00 top level file.
// Revision 2K8A  2008/07/14 WF
//   See the 68K00 top level file.
// Revision 2K8B  2008/12/24 WF
//   Fixed a minor bug in the RESET operation.
//   Changes regarding the read modify write logic of the TAS operation.
//   Changed OP_START to solve the Ax,-(Ax) bug, see address register section.
//   Fixed useless bus read operation during JSR. Thanks to T. Gubener for finding this.
//   Fixed MOVEM (A0)+,D0 bug. Thanks to T. Gubener for finding this.
//   Fixed LINK A7.
//   Changed OP_START to manage MOVEM index storage.
// Revision 2K9B  2009/12/24 WF
//   Changed UNLK A7 logic due to compatibility reasons with MC68000.


module  wf68k00ip_control ( clk, resetn, c_code, reglistmask, ctrl_en, exec_abort, data_valid, bus_cyc_rdy, ctrl_rdy, init_status, preset_irq_mask, sr_ccr_in, irq, irq_save, xnzvc_in, status_reg_out, force_biw2, force_biw3, ext_cnt, dest_ext_cnt, regsel_20, iw_adr, iw_wr, src_destn, ew_wr, ew_adr, rd_bus, wr_bus, tas_lock, wr_hi, sel_a_hi, sel_a_midhi, sel_a_midlo, sel_a_lo, sel_buff_a_lo, sel_buff_a_hi, sel_buff_b_lo, sel_buff_b_hi, fc_out, fc_en, pc_init, pc_wr, pc_inc, pc_tmp_clr, pc_tmp_inc, pc_add_displ, usp_inc, ssp_inc, usp_dec, ssp_dec, usp_cpy, sp_add_displ, adr_tmp_clr, adr_tmp_inc, ar_inc, ar_dec, ar_wr, ar_dr_exg, dr_wr, dr_dec, scan_traps, trap_priv, trap_trace, op, op_mode, op_size, adr_mode, move_d_am, reset_rdy, op_busy, mem_shft, shft_busy, dr, rm, div_mul_32n64, exec_resume, dbcc_cond, use_sp_adr, op_start, trap_chk_en, movem_regsel, movem_adn, scc_cond, shifter_load, chk_pc, chk_adr, sbit, unlk_sp_an, reset_en );
    //type op_sizetype
     parameter long__op_sizetype=2'd0;
     parameter word__op_sizetype=2'd1;
     parameter byte__op_sizetype=2'd2;
     
//type d_sizetype
     parameter long__d_sizetype=2'd0;
     parameter word__d_sizetype=2'd1;
     parameter byte__d_sizetype=2'd2;
     
//type op_68k00
     parameter abcd__op_68k00=7'd0;
     parameter add__op_68k00=7'd1;
     parameter adda__op_68k00=7'd2;
     parameter addi__op_68k00=7'd3;
     parameter addq__op_68k00=7'd4;
     parameter addx__op_68k00=7'd5;
     parameter and_b__op_68k00=7'd6;
     parameter andi__op_68k00=7'd7;
     parameter andi_to_ccr__op_68k00=7'd8;
     parameter andi_to_sr__op_68k00=7'd9;
     parameter asl__op_68k00=7'd10;
     parameter asr__op_68k00=7'd11;
     parameter bcc__op_68k00=7'd12;
     parameter bchg__op_68k00=7'd13;
     parameter bclr__op_68k00=7'd14;
     parameter bra__op_68k00=7'd15;
     parameter bset__op_68k00=7'd16;
     parameter bsr__op_68k00=7'd17;
     parameter btst__op_68k00=7'd18;
     parameter chk__op_68k00=7'd19;
     parameter clr__op_68k00=7'd20;
     parameter cmp__op_68k00=7'd21;
     parameter cmpa__op_68k00=7'd22;
     parameter cmpi__op_68k00=7'd23;
     parameter cmpm__op_68k00=7'd24;
     parameter dbcc__op_68k00=7'd25;
     parameter divs__op_68k00=7'd26;
     parameter divu__op_68k00=7'd27;
     parameter eor__op_68k00=7'd28;
     parameter eori__op_68k00=7'd29;
     parameter eori_to_ccr__op_68k00=7'd30;
     parameter eori_to_sr__op_68k00=7'd31;
     parameter exg__op_68k00=7'd32;
     parameter extw__op_68k00=7'd33;
     parameter illegal__op_68k00=7'd34;
     parameter jmp__op_68k00=7'd35;
     parameter jsr__op_68k00=7'd36;
     parameter lea__op_68k00=7'd37;
     parameter link__op_68k00=7'd38;
     parameter lsl__op_68k00=7'd39;
     parameter lsr__op_68k00=7'd40;
     parameter move__op_68k00=7'd41;
     parameter movea__op_68k00=7'd42;
     parameter move_from_ccr__op_68k00=7'd43;
     parameter move_to_ccr__op_68k00=7'd44;
     parameter move_from_sr__op_68k00=7'd45;
     parameter move_to_sr__op_68k00=7'd46;
     parameter move_usp__op_68k00=7'd47;
     parameter movem__op_68k00=7'd48;
     parameter movep__op_68k00=7'd49;
     parameter moveq__op_68k00=7'd50;
     parameter muls__op_68k00=7'd51;
     parameter mulu__op_68k00=7'd52;
     parameter nbcd__op_68k00=7'd53;
     parameter neg__op_68k00=7'd54;
     parameter negx__op_68k00=7'd55;
     parameter nop__op_68k00=7'd56;
     parameter not_b__op_68k00=7'd57;
     parameter or_b__op_68k00=7'd58;
     parameter ori__op_68k00=7'd59;
     parameter ori_to_ccr__op_68k00=7'd60;
     parameter ori_to_sr__op_68k00=7'd61;
     parameter pea__op_68k00=7'd62;
     parameter reset__op_68k00=7'd63;
     parameter rotl__op_68k00=7'd64;
     parameter rotr__op_68k00=7'd65;
     parameter roxl__op_68k00=7'd66;
     parameter roxr__op_68k00=7'd67;
     parameter rte__op_68k00=7'd68;
     parameter rtr__op_68k00=7'd69;
     parameter rts__op_68k00=7'd70;
     parameter sbcd__op_68k00=7'd71;
     parameter scc__op_68k00=7'd72;
     parameter stop__op_68k00=7'd73;
     parameter sub__op_68k00=7'd74;
     parameter suba__op_68k00=7'd75;
     parameter subi__op_68k00=7'd76;
     parameter subq__op_68k00=7'd77;
     parameter subx__op_68k00=7'd78;
     parameter swap__op_68k00=7'd79;
     parameter tas__op_68k00=7'd80;
     parameter trap__op_68k00=7'd81;
     parameter trapv__op_68k00=7'd82;
     parameter tst__op_68k00=7'd83;
     parameter unlk__op_68k00=7'd84;
     parameter reserved__op_68k00=7'd85;
     parameter unimplemented__op_68k00=7'd86;
     

    input  [0:0] clk;
    input  [0:0] resetn;
    input [3:0]  c_code ;
    input [15:0]  reglistmask ;
    input  [0:0] ctrl_en;
    input  [0:0] exec_abort;
    input  [0:0] data_valid;
    input  [0:0] bus_cyc_rdy;
    output  [0:0] ctrl_rdy;
    input  [0:0] init_status;
    input  [0:0] preset_irq_mask;
    input [15:0]  sr_ccr_in ;
    input [2:0]  irq ;
    input  [0:0] irq_save;
    input [4:0]  xnzvc_in ;
    output [15:0]  status_reg_out ;
    input  [0:0] force_biw2;
    input  [0:0] force_biw3;
    input [1:0] ext_cnt;
    input [1:0] dest_ext_cnt;
    input [2:0]  regsel_20 ;
    output iw_adr;
    output  [0:0] iw_wr;
    output  [0:0] src_destn;
    output  [0:0] ew_wr;
    output ew_adr;
    output  [0:0] rd_bus;
    output  [0:0] wr_bus;
    output  [0:0] tas_lock;
    output  [0:0] wr_hi;
    output  [0:0] sel_a_hi;
    output  [0:0] sel_a_midhi;
    output  [0:0] sel_a_midlo;
    output  [0:0] sel_a_lo;
    output  [0:0] sel_buff_a_lo;
    output  [0:0] sel_buff_a_hi;
    output  [0:0] sel_buff_b_lo;
    output  [0:0] sel_buff_b_hi;
    output [2:0]  fc_out ;
    output  [0:0] fc_en;
    output  [0:0] pc_init;
    output  [0:0] pc_wr;
    output  [0:0] pc_inc;
    output  [0:0] pc_tmp_clr;
    output  [0:0] pc_tmp_inc;
    output  [0:0] pc_add_displ;
    output  [0:0] usp_inc;
    output  [0:0] ssp_inc;
    output  [0:0] usp_dec;
    output  [0:0] ssp_dec;
    output  [0:0] usp_cpy;
    output  [0:0] sp_add_displ;
    output  [0:0] adr_tmp_clr;
    output  [0:0] adr_tmp_inc;
    output  [0:0] ar_inc;
    output  [0:0] ar_dec;
    output  [0:0] ar_wr;
    output  [0:0] ar_dr_exg;
    output  [0:0] dr_wr;
    output  [0:0] dr_dec;
    output  [0:0] scan_traps;
    input  [0:0] trap_priv;
    output  [0:0] trap_trace;
    input  [6:0] op;
    input [2:0]  op_mode ;
    input  [1:0] op_size;
    input [2:0]  adr_mode ;
    input [2:0]  move_d_am ;
    input  [0:0] reset_rdy;
    input  [0:0] op_busy;
    input  [0:0] mem_shft;
    input  [0:0] shft_busy;
    input  [0:0] dr;
    input  [0:0] rm;
    input  [0:0] div_mul_32n64;
    input  [0:0] exec_resume;
    input  [0:0] dbcc_cond;
    output  [0:0] use_sp_adr;
    output  [0:0] op_start;
    output  [0:0] trap_chk_en;
    output [2:0]  movem_regsel ;
    output  [0:0] movem_adn;
    output  [0:0] scc_cond;
    output  [0:0] shifter_load;
    output  [0:0] chk_pc;
    output  [0:0] chk_adr;
    output  [0:0] sbit;
    output  [0:0] unlk_sp_an;
    output  [0:0] reset_en;


reg [0:0] chk_adr_strb__lock;
reg [0:0] predec_ctrl__lock;
    reg [9:0] p_status_reg__sreg_mem;
    reg [9:0] p_status_reg__sreg_mem_tmp;
    reg [1:0] /* integer transformed. */ exword_counter__src_tmp;
    reg [1:0] /* integer transformed. */ exword_counter__dest_tmp;
reg [0:0] exword_counter__lock;
    reg [4:0] /* integer transformed. */ movem_ctrl__bit_pnt;
    reg [2:0] movem_ctrl__regsel_tmp;
//type exec_states
    parameter idle__exec_states=5'd0;
    parameter fetch_biw_1__exec_states=5'd1;
    parameter fetch_biw_2__exec_states=5'd2;
    parameter fetch_biw_3__exec_states=5'd3;
    parameter fetch_ext__exec_states=5'd4;
    parameter fetch_dest_ext__exec_states=5'd5;
    parameter rd_src_1__exec_states=5'd6;
    parameter rd_src_1_lo__exec_states=5'd7;
    parameter rd_src_1_hi__exec_states=5'd8;
    parameter rd_src_2__exec_states=5'd9;
    parameter rd_src_2_lo__exec_states=5'd10;
    parameter rd_src_2_hi__exec_states=5'd11;
    parameter wr_dest_1__exec_states=5'd12;
    parameter wr_dest_1_lo__exec_states=5'd13;
    parameter wr_dest_1_hi__exec_states=5'd14;
    parameter wr_dest_2_lo__exec_states=5'd15;
    parameter wr_dest_2_hi__exec_states=5'd16;
    parameter rd_sp_hi__exec_states=5'd17;
    parameter rd_sp__exec_states=5'd18;
    parameter rd_sp_lo__exec_states=5'd19;
    parameter wr_sp_hi__exec_states=5'd20;
    parameter wr_sp_lo__exec_states=5'd21;
    parameter wait_operation__exec_states=5'd22;
    parameter movem_tst__exec_states=5'd23;
    
reg [4:0] exec_state;
reg [4:0] next_exec_state;
    reg [15:0] status_reg;
wire [0:0] sr_wr;
wire [0:0] ccr_wr;
wire [0:0] cc_updt;
reg [0:0] got_ext;
reg [0:0] got_dest_ext;
reg [0:0] movem_en =0; 
    reg movem_cpy;
reg [0:0] movem_adn_i =0; 
reg [0:0] movem_pi_corr =0; 
wire [0:0] cond;
wire [0:0] op_end_i;
wire [0:0] rd_bus_i;
wire [0:0] wr_bus_i;
wire [0:0] ar_inc_i;
reg [0:0] ar_dec_i =0; 
wire [0:0] updt_cc;
wire [0:0] sbit_i;
reg [0:0] traplock;
wire [0:0] ctrl_rdy;
    reg [15:0] status_reg_out;
    wire [1:0] iw_adr;
wire [0:0] iw_wr;
wire [0:0] src_destn;
wire [0:0] ew_wr;
    reg [0:0] /* integer transformed. */ ew_adr;
wire [0:0] rd_bus;
wire [0:0] wr_bus;
reg [0:0] tas_lock =0; 
wire [0:0] wr_hi;
wire [0:0] sel_a_hi;
wire [0:0] sel_a_midhi;
wire [0:0] sel_a_midlo;
wire [0:0] sel_a_lo;
wire [0:0] sel_buff_a_lo;
wire [0:0] sel_buff_a_hi;
wire [0:0] sel_buff_b_lo;
wire [0:0] sel_buff_b_hi;
    wire [2:0] fc_out;
wire [0:0] fc_en;
wire [0:0] pc_init;
wire [0:0] pc_wr;
wire [0:0] pc_inc;
wire [0:0] pc_tmp_clr;
wire [0:0] pc_tmp_inc;
wire [0:0] pc_add_displ;
wire [0:0] usp_inc;
wire [0:0] ssp_inc;
wire [0:0] usp_dec;
wire [0:0] ssp_dec;
wire [0:0] usp_cpy;
wire [0:0] sp_add_displ;
wire [0:0] adr_tmp_clr;
wire [0:0] adr_tmp_inc;
wire [0:0] ar_inc;
reg [0:0] ar_dec =0; 
wire [0:0] ar_wr;
wire [0:0] ar_dr_exg;
wire [0:0] dr_wr;
wire [0:0] dr_dec;
wire [0:0] scan_traps;
wire [0:0] trap_trace;
wire [0:0] use_sp_adr;
wire [0:0] op_start;
wire [0:0] trap_chk_en;
    reg [2:0] movem_regsel;
reg [0:0] movem_adn =0; 
wire [0:0] scc_cond;
wire [0:0] shifter_load;
reg [0:0] chk_pc =0; 
reg [0:0] chk_adr =0; 
wire [0:0] sbit;
wire [0:0] unlk_sp_an;
wire [0:0] reset_en;


    
   assign op_start = (((op == move__op_68k00) & (exec_state == fetch_biw_1__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      : (((op == movem__op_68k00) & ((exec_state == fetch_biw_2__exec_states) | (exec_state == fetch_ext__exec_states))) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      : ((((op == link__op_68k00) | (op == pea__op_68k00)) & (!(exec_state==wr_sp_lo__exec_states))) & (next_exec_state == wr_sp_lo__exec_states)) ? 
                         1'b1
                      : (((!(op==stop__op_68k00)) & (!(exec_state==wait_operation__exec_states))) & (next_exec_state == wait_operation__exec_states)) ? 
                         1'b1
                      :  1'b0;
   
   assign op_end_i = (((!(exec_state==idle__exec_states)) & (!(exec_state==fetch_biw_1__exec_states))) & (next_exec_state == fetch_biw_1__exec_states)) ? 
                         1'b1
                      : (((exec_state == fetch_biw_1__exec_states) & (next_exec_state == fetch_biw_1__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      :  1'b0;
   
   assign ctrl_rdy = (exec_state == idle__exec_states) ? 
                         1'b1
                      :  1'b0;
   
   assign use_sp_adr = (exec_state == rd_sp__exec_states) ? 
                           1'b1
                        : (exec_state == rd_sp_hi__exec_states) ? 
                           1'b1
                        : (exec_state == rd_sp_lo__exec_states) ? 
                           1'b1
                        : (exec_state == wr_sp_hi__exec_states) ? 
                           1'b1
                        : (exec_state == wr_sp_lo__exec_states) ? 
                           1'b1
                        :  1'b0;
   
   assign shifter_load = ((((op == asl__op_68k00) | (op == asr__op_68k00)) & (!(exec_state==wait_operation__exec_states))) & (next_exec_state == wait_operation__exec_states)) ? 
                             1'b1
                          : ((((op == lsl__op_68k00) | (op == lsr__op_68k00)) & (!(exec_state==wait_operation__exec_states))) & (next_exec_state == wait_operation__exec_states)) ? 
                             1'b1
                          : ((((op == rotl__op_68k00) | (op == rotr__op_68k00)) & (!(exec_state==wait_operation__exec_states))) & (next_exec_state == wait_operation__exec_states)) ? 
                             1'b1
                          : ((((op == roxl__op_68k00) | (op == roxr__op_68k00)) & (!(exec_state==wait_operation__exec_states))) & (next_exec_state == wait_operation__exec_states)) ? 
                             1'b1
                          :  1'b0;
   
   assign trap_trace = ((op_end_i == 1'b1) & (status_reg[15] == 1'b1)) ? 
                           1'b1
                        :  1'b0;
   
       
   always @ (negedge resetn or posedge clk ) // begin 
           if ((resetn == 1'b0)) 
               begin 
                   chk_pc <= 1'b0;
                   chk_adr <= 1'b0;
                   chk_adr_strb__lock = 1'b0;
               end
               
           else 
               begin 
                   chk_pc <= 1'b0;
                   chk_adr <= 1'b0;
                   if ((ctrl_en == 1'b0)) 
                       ;//null
                       
                   else if (((((exec_state == fetch_biw_1__exec_states) | (exec_state == fetch_biw_2__exec_states)) | (exec_state == fetch_biw_3__exec_states)) & (chk_adr_strb__lock == 1'b0))) 
                       begin 
                           chk_adr_strb__lock = 1'b1;
                           chk_pc <= 1'b1;
                       end
                       
                   else if ((((exec_state == fetch_ext__exec_states) | (exec_state == fetch_dest_ext__exec_states)) & (chk_adr_strb__lock == 1'b0))) 
                       begin 
                           chk_adr_strb__lock = 1'b1;
                           chk_pc <= 1'b1;
                       end
                       
                   else if ((((!(op==tas__op_68k00)) & ((rd_bus_i == 1'b1) | (wr_bus_i == 1'b1))) & (chk_adr_strb__lock == 1'b0))) 
                       begin 
                           chk_adr_strb__lock = 1'b1;
                           chk_adr <= 1'b1;
                       end
                       
                   else if (((bus_cyc_rdy == 1'b1) | (exec_state == idle__exec_states))) 
                       begin 
                           chk_adr_strb__lock = 1'b0;
                           chk_adr <= 1'b0;
                           chk_pc <= 1'b0;
                       end
                       
                   
                   
               end
               
           
   // end always 
   
       
   always @ (negedge resetn or posedge clk ) // begin 
           if ((resetn == 1'b0)) 
               tas_lock <= 1'b0;
               
           else 
               
                   if (((op == tas__op_68k00) & (next_exec_state == rd_src_1__exec_states))) 
                       tas_lock <= 1'b1;
                       
                   else if (((op == tas__op_68k00) & (op_end_i == 1'b1))) 
                       tas_lock <= 1'b0;
                       
                   
                   
               
           
   // end always 
   
   assign sel_a_hi = ((op == movep__op_68k00) & (exec_state == rd_src_1_hi__exec_states)) ? 
                         1'b1
                      : ((op == movep__op_68k00) & (exec_state == wr_dest_1_hi__exec_states)) ? 
                         1'b1
                      :  1'b0;
   
   assign sel_a_midhi = ((op == movep__op_68k00) & (exec_state == rd_src_1_lo__exec_states)) ? 
                            1'b1
                         : ((op == movep__op_68k00) & (exec_state == wr_dest_1_lo__exec_states)) ? 
                            1'b1
                         :  1'b0;
   
   assign sel_a_midlo = ((op == movep__op_68k00) & (exec_state == rd_src_2_hi__exec_states)) ? 
                            1'b1
                         : ((op == movep__op_68k00) & (exec_state == wr_dest_2_hi__exec_states)) ? 
                            1'b1
                         :  1'b0;
   
   assign sel_a_lo = ((op == movep__op_68k00) & (exec_state == rd_src_2_lo__exec_states)) ? 
                         1'b1
                      : ((op == movep__op_68k00) & (exec_state == wr_dest_2_lo__exec_states)) ? 
                         1'b1
                      :  1'b0;
   
   assign sel_buff_a_lo = (exec_state == rd_src_1__exec_states) ? 
                              1'b1
                           : (exec_state == rd_src_1_lo__exec_states) ? 
                              1'b1
                           : (exec_state == rd_sp_lo__exec_states) ? 
                              1'b1
                           :  1'b0;
   
   assign sel_buff_a_hi = (exec_state == rd_src_1_hi__exec_states) ? 
                              1'b1
                           : (exec_state == rd_sp_hi__exec_states) ? 
                              1'b1
                           :  1'b0;
   
   assign sel_buff_b_lo = (exec_state == rd_src_2__exec_states) ? 
                              1'b1
                           : (exec_state == rd_src_2_lo__exec_states) ? 
                              1'b1
                           :  1'b0;
   
   assign sel_buff_b_hi = (exec_state == rd_src_2_hi__exec_states) ? 
                              1'b1
                           :  1'b0;
   
   assign scan_traps = ((exec_state == fetch_biw_1__exec_states) & (bus_cyc_rdy == 1'b1)) ? 
                           1'b1
                        :  1'b0;
   
   assign sbit = sbit_i;
   
   assign sbit_i = (status_reg[13] == 1'b1) ? 
                       1'b1
                    :  1'b0;
   
   assign fc_en = ((rd_bus_i == 1'b1) | (wr_bus_i == 1'b1)) ? 
                      1'b1
                   :  1'b0;
   
   assign fc_out = ((sbit_i == 1'b0) & (((((exec_state == fetch_biw_1__exec_states) | (exec_state == fetch_biw_2__exec_states)) | (exec_state == fetch_biw_3__exec_states)) | (exec_state == fetch_ext__exec_states)) | (exec_state == fetch_dest_ext__exec_states))) ? 
                       3'b010
                    : ((sbit_i == 1'b1) & (((((exec_state == fetch_biw_1__exec_states) | (exec_state == fetch_biw_2__exec_states)) | (exec_state == fetch_biw_3__exec_states)) | (exec_state == fetch_ext__exec_states)) | (exec_state == fetch_dest_ext__exec_states))) ? 
                       3'b110
                    : (((rd_bus_i == 1'b1) | (wr_bus_i == 1'b1)) & (sbit_i == 1'b0)) ? 
                       3'b001
                    : (((rd_bus_i == 1'b1) | (wr_bus_i == 1'b1)) & (sbit_i == 1'b1)) ? 
                       3'b101
                    :  3'b000;
   
   assign cond = (c_code == 4'h0) ? 
                     1'b1
                  : ((c_code == 4'h2) & ((~(status_reg[2] | status_reg[0])) == 1'b1)) ? 
                     1'b1
                  : ((c_code == 4'h3) & ((status_reg[2] | status_reg[0]) == 1'b1)) ? 
                     1'b1
                  : ((c_code == 4'h4) & (status_reg[0] == 1'b0)) ? 
                     1'b1
                  : ((c_code == 4'h5) & (status_reg[0] == 1'b1)) ? 
                     1'b1
                  : ((c_code == 4'h6) & (status_reg[2] == 1'b0)) ? 
                     1'b1
                  : ((c_code == 4'h7) & (status_reg[2] == 1'b1)) ? 
                     1'b1
                  : ((c_code == 4'h8) & (status_reg[1] == 1'b0)) ? 
                     1'b1
                  : ((c_code == 4'h9) & (status_reg[1] == 1'b1)) ? 
                     1'b1
                  : ((c_code == 4'hA) & (status_reg[3] == 1'b0)) ? 
                     1'b1
                  : ((c_code == 4'hB) & (status_reg[3] == 1'b1)) ? 
                     1'b1
                  : ((c_code == 4'hC) & ((status_reg[3] ^~ status_reg[1]) == 1'b1)) ? 
                     1'b1
                  : ((c_code == 4'hD) & ((status_reg[3] ^ status_reg[1]) == 1'b1)) ? 
                     1'b1
                  : ((c_code == 4'hE) & (status_reg[3:1] == 3'b101)) ? 
                     1'b1
                  : ((c_code == 4'hE) & (status_reg[3:1] == 3'b000)) ? 
                     1'b1
                  : ((c_code == 4'hF) & (status_reg[2] == 1'b1)) ? 
                     1'b1
                  : ((c_code == 4'hF) & ((status_reg[3] ^ status_reg[1]) == 1'b1)) ? 
                     1'b1
                  :  1'b0;
   
   assign scc_cond = cond;
   
   assign ew_wr = ((exec_state == fetch_ext__exec_states) & (data_valid == 1'b1)) ? 
                      1'b1
                   : ((exec_state == fetch_dest_ext__exec_states) & (data_valid == 1'b1)) ? 
                      1'b1
                   :  1'b0;
   
   assign iw_adr = (exec_state == fetch_biw_3__exec_states) ? 
                       2
                    : (exec_state == fetch_biw_2__exec_states) ? 
                       1
                    :  0;
   
   assign iw_wr = ((exec_state == fetch_biw_1__exec_states) & (data_valid == 1'b1)) ? 
                      1'b1
                   : ((exec_state == fetch_biw_2__exec_states) & (data_valid == 1'b1)) ? 
                      1'b1
                   : ((exec_state == fetch_biw_3__exec_states) & (data_valid == 1'b1)) ? 
                      1'b1
                   :  1'b0;
   
   assign unlk_sp_an = ((op == unlk__op_68k00) & (exec_state == fetch_biw_1__exec_states)) ? 
                           1'b1
                        :  1'b0;
   
   assign src_destn = ((op == move__op_68k00) & (exec_state == fetch_dest_ext__exec_states)) ? 
                          1'b0
                       : ((((((op == abcd__op_68k00) | (op == addx__op_68k00)) | (op == cmpm__op_68k00)) | (op == sbcd__op_68k00)) | (op == subx__op_68k00)) & (exec_state == rd_src_2__exec_states)) ? 
                          1'b0
                       : ((((op == addx__op_68k00) | (op == cmpm__op_68k00)) | (op == subx__op_68k00)) & (exec_state == rd_src_2_hi__exec_states)) ? 
                          1'b0
                       : ((((op == addx__op_68k00) | (op == cmpm__op_68k00)) | (op == subx__op_68k00)) & (exec_state == rd_src_2_lo__exec_states)) ? 
                          1'b0
                       : ((((op == addx__op_68k00) | (op == subx__op_68k00)) | (op == move__op_68k00)) & (exec_state == wr_dest_1_hi__exec_states)) ? 
                          1'b0
                       : ((((op == addx__op_68k00) | (op == subx__op_68k00)) | (op == move__op_68k00)) & (exec_state == wr_dest_1_lo__exec_states)) ? 
                          1'b0
                       : ((((((op == abcd__op_68k00) | (op == addx__op_68k00)) | (op == move__op_68k00)) | (op == sbcd__op_68k00)) | (op == subx__op_68k00)) & (exec_state == wr_dest_1__exec_states)) ? 
                          1'b0
                       :  1'b1;
   
   assign ar_dr_exg = ((op == exg__op_68k00) & (op_end_i == 1'b1)) ? 
                          1'b1
                       :  1'b0;
   
   assign dr_dec = ((op == dbcc__op_68k00) & (next_exec_state == wait_operation__exec_states)) ? 
                       1'b1
                    :  1'b0;
   
   assign dr_wr = ((((op == abcd__op_68k00) | (op == sbcd__op_68k00)) & (rm == 1'b0)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((((op == add__op_68k00) | (op == sub__op_68k00)) | (op == and_b__op_68k00)) | (op == or_b__op_68k00)) & (op_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((((op == add__op_68k00) | (op == sub__op_68k00)) | (op == and_b__op_68k00)) | (op == or_b__op_68k00)) & (op_mode == 3'b001)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((((op == add__op_68k00) | (op == sub__op_68k00)) | (op == and_b__op_68k00)) | (op == or_b__op_68k00)) & (op_mode == 3'b010)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == addi__op_68k00) | (op == addq__op_68k00)) & (adr_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == andi__op_68k00) | (op == ori__op_68k00)) & (adr_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == addx__op_68k00) | (op == subx__op_68k00)) & (rm == 1'b0)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : (((op == extw__op_68k00) | (op == swap__op_68k00)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == eor__op_68k00) | (op == eori__op_68k00)) & (adr_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == subi__op_68k00) | (op == subq__op_68k00)) & (adr_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == neg__op_68k00) | (op == negx__op_68k00)) & (adr_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == nbcd__op_68k00) | (op == not_b__op_68k00)) & (adr_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == asl__op_68k00) | (op == asr__op_68k00)) & (mem_shft == 1'b0)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == lsl__op_68k00) | (op == lsr__op_68k00)) & (mem_shft == 1'b0)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == rotl__op_68k00) | (op == rotr__op_68k00)) & (mem_shft == 1'b0)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == roxl__op_68k00) | (op == roxr__op_68k00)) & (mem_shft == 1'b0)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((((op == bchg__op_68k00) | (op == bclr__op_68k00)) | (op == bset__op_68k00)) | (op == clr__op_68k00)) & (adr_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == divs__op_68k00) | (op == divu__op_68k00)) & (exec_state == wait_operation__exec_states)) & (op_busy == 1'b0)) ? 
                      1'b1
                   : (((op == move__op_68k00) & (move_d_am == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == move_from_ccr__op_68k00) | (op == move_from_sr__op_68k00)) & (adr_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((op == moveq__op_68k00) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : (((op == movep__op_68k00) & ((op_mode == 3'b101) | (op_mode == 3'b100))) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : (((((op == movem__op_68k00) & (next_exec_state == movem_tst__exec_states)) & (movem_cpy == 1'b1)) & (dr == 1'b1)) & (movem_adn_i == 1'b0)) ? 
                      1'b1
                   : ((((op == muls__op_68k00) | (op == mulu__op_68k00)) & (exec_state == wait_operation__exec_states)) & (op_busy == 1'b0)) ? 
                      1'b1
                   : (((op == scc__op_68k00) & (adr_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : (((op == tas__op_68k00) & (adr_mode == 3'b000)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   :  1'b0;
   
   assign ar_wr = ((((op == adda__op_68k00) | (op == suba__op_68k00)) | (op == lea__op_68k00)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((op == movea__op_68k00) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((((op == addq__op_68k00) | (op == subq__op_68k00)) & (adr_mode == 3'b001)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : ((op == link__op_68k00) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : (((op == unlk__op_68k00) & (exec_state == fetch_biw_1__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                      1'b1
                   : ((op == unlk__op_68k00) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : (((((op == movem__op_68k00) & (next_exec_state == movem_tst__exec_states)) & (movem_cpy == 1'b1)) & (dr == 1'b1)) & (movem_adn_i == 1'b1)) ? 
                      1'b1
                   :  1'b0;
   
   assign ar_inc = ar_inc_i;
   
   assign ar_inc_i = ((((((op == add__op_68k00) | (op == adda__op_68k00)) | (op == addi__op_68k00)) | (op == addq__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : ((((op == and_b__op_68k00) | (op == andi__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : (((((op == asl__op_68k00) | (op == asr__op_68k00)) & (mem_shft == 1'b1)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : ((((((op == bchg__op_68k00) | (op == bclr__op_68k00)) | (op == bset__op_68k00)) | (op == btst__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : ((((op == chk__op_68k00) | (op == clr__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : (((((op == cmp__op_68k00) | (op == cmpa__op_68k00)) | (op == cmpi__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : (((op == cmpm__op_68k00) & (exec_state == rd_src_1__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      : (((op == cmpm__op_68k00) & (exec_state == rd_src_1_lo__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      : ((op == cmpm__op_68k00) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : ((((op == divs__op_68k00) | (op == divu__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : ((((op == eor__op_68k00) | (op == eori__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : (((((op == lsl__op_68k00) | (op == lsr__op_68k00)) & (mem_shft == 1'b1)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : ((((op == move__op_68k00) & (exec_state == rd_src_1__exec_states)) & (adr_mode == 3'b011)) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      : ((((op == move__op_68k00) & (exec_state == rd_src_1_lo__exec_states)) & (adr_mode == 3'b011)) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      : ((((op == move__op_68k00) & (exec_state == wr_dest_1__exec_states)) & (move_d_am == 3'b011)) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      : ((((op == move__op_68k00) & (exec_state == wr_dest_1_lo__exec_states)) & (move_d_am == 3'b011)) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      : (((((op == movea__op_68k00) | (op == move_from_ccr__op_68k00)) | (op == move_from_sr__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : ((((op == move_to_ccr__op_68k00) | (op == move_to_sr__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : ((((op == movem__op_68k00) & (adr_mode == 3'b011)) & (exec_state == rd_src_1__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      : ((((op == movem__op_68k00) & (adr_mode == 3'b011)) & (exec_state == rd_src_1_lo__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                         1'b1
                      : ((op == movem__op_68k00) & (movem_pi_corr == 1'b1)) ? 
                         1'b1
                      : ((((op == muls__op_68k00) | (op == mulu__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : (((((op == nbcd__op_68k00) | (op == neg__op_68k00)) | (op == negx__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : (((((op == not_b__op_68k00) | (op == or_b__op_68k00)) | (op == ori__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : (((((op == rotl__op_68k00) | (op == rotr__op_68k00)) & (mem_shft == 1'b1)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : (((((op == roxl__op_68k00) | (op == roxr__op_68k00)) & (mem_shft == 1'b1)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : ((((((op == sub__op_68k00) | (op == suba__op_68k00)) | (op == subi__op_68k00)) | (op == subq__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      : (((((op == scc__op_68k00) | (op == tas__op_68k00)) | (op == tst__op_68k00)) & (adr_mode == 3'b011)) & (op_end_i == 1'b1)) ? 
                         1'b1
                      :  1'b0;
   
   always @ (negedge resetn or posedge clk ) begin 
       if ((resetn == 1'b0)) 
           begin 
               begin /* variable_assign ment  predec_ctrl__lock  has moved. */ end 
               ar_dec_i <= 1'b0;
           end
           
       else 
           begin 
               ar_dec_i <= 1'b0;
               if (((((op == abcd__op_68k00) | (op == sbcd__op_68k00)) & ((exec_state == rd_src_1__exec_states) | (exec_state == rd_src_1_hi__exec_states))) & (bus_cyc_rdy == 1'b1))) 
                   predec_ctrl__lock = 1'b0;
                   
               else if (((((op == addx__op_68k00) | (op == subx__op_68k00)) & ((exec_state == rd_src_1__exec_states) | (exec_state == rd_src_1_hi__exec_states))) & (bus_cyc_rdy == 1'b1))) 
                   predec_ctrl__lock = 1'b0;
                   
               else if ((((op == move__op_68k00) | (op == movem__op_68k00)) & (bus_cyc_rdy == 1'b1))) 
                   predec_ctrl__lock = 1'b0;
                   
               else if ((op_end_i == 1'b1)) 
                   predec_ctrl__lock = 1'b0;
                   
               else if ((((((exec_state == rd_src_1__exec_states) | (exec_state == rd_src_1_hi__exec_states)) | (exec_state == wr_dest_1__exec_states)) | (exec_state == wr_dest_1_hi__exec_states)) & (predec_ctrl__lock == 1'b0))) 
                   case (op)
                       add__op_68k00,addi__op_68k00,addq__op_68k00,and_b__op_68k00,andi__op_68k00,asl__op_68k00,asr__op_68k00,bchg__op_68k00,bclr__op_68k00,bset__op_68k00,btst__op_68k00,eor__op_68k00,eori__op_68k00,lsl__op_68k00,lsr__op_68k00,neg__op_68k00,negx__op_68k00,not_b__op_68k00,nbcd__op_68k00,or_b__op_68k00,ori__op_68k00,rotl__op_68k00,rotr__op_68k00,roxl__op_68k00,roxr__op_68k00,sub__op_68k00,subi__op_68k00,subq__op_68k00,tas__op_68k00 : 
                               if ((adr_mode == 3'b100)) 
                                   begin 
                                       ar_dec_i <= 1'b1;
                                       predec_ctrl__lock = 1'b1;
                                   end

                               
                       clr__op_68k00,move_from_ccr__op_68k00,move_from_sr__op_68k00,scc__op_68k00 : 
                               if ((adr_mode == 3'b100)) 
                                   begin 
                                       ar_dec_i <= 1'b1;
                                       predec_ctrl__lock = 1'b1;
                                   end

                               
                       adda__op_68k00,chk__op_68k00,cmp__op_68k00,cmpa__op_68k00,cmpi__op_68k00,divs__op_68k00,divu__op_68k00,move_to_ccr__op_68k00,move_to_sr__op_68k00,movea__op_68k00,movem__op_68k00,muls__op_68k00,mulu__op_68k00,suba__op_68k00,tst__op_68k00 : 
                               if ((adr_mode == 3'b100)) 
                                   begin 
                                       ar_dec_i <= 1'b1;
                                       predec_ctrl__lock = 1'b1;
                                   end

                               
                       abcd__op_68k00,addx__op_68k00,sbcd__op_68k00,subx__op_68k00 : 
                               if ((adr_mode == 3'b100)) 
                                   begin 
                                       ar_dec_i <= 1'b1;
                                       predec_ctrl__lock = 1'b1;
                                   end

                               
                       move__op_68k00 : 
                               if ((((exec_state == rd_src_1__exec_states) | (exec_state == rd_src_1_hi__exec_states)) & (adr_mode == 3'b100))) 
                                   begin 
                                       ar_dec_i <= 1'b1;
                                       predec_ctrl__lock = 1'b1;
                                   end
                               else if ((((exec_state == wr_dest_1__exec_states) | (exec_state == wr_dest_1_hi__exec_states)) & (move_d_am == 3'b100))) 
                                   begin 
                                       ar_dec_i <= 1'b1;
                                       predec_ctrl__lock = 1'b1;
                                   end

                               
                       default : 
                               ;//null
                   endcase
                   
               else if ((((exec_state == rd_src_2__exec_states) | (exec_state == rd_src_2_hi__exec_states)) & (predec_ctrl__lock == 1'b0))) 
                   case (op)
                       abcd__op_68k00,addx__op_68k00,sbcd__op_68k00,subx__op_68k00 : 
                           begin 
                               ar_dec_i <= 1'b1;
                               predec_ctrl__lock = 1'b1;
                           end
                       default : 
                               ;//null
                   endcase
                   
               
               
           end
           
       
    end// always 
       
   always @ (resetn or clk or ar_dec_i ) // begin 
       begin 
           if ((resetn == 1'b0)) 
               begin 
                   predec_ctrl__lock = 1'b0;
                   begin /* signal_assign ment has moved. */ end 
               end
               
           ar_dec <= ar_dec_i;
       end 
   // end always 
   
   assign adr_tmp_clr = (((op_end_i == 1'b1) | (ar_inc_i == 1'b1)) | (ar_dec_i == 1'b1)) ? 
                            1'b1
                         : (((!(op==movem__op_68k00)) & (exec_state == rd_src_1__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         : ((exec_state == rd_src_2__exec_states) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         : (((!(op==movem__op_68k00)) & (exec_state == rd_src_1_lo__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         : ((exec_state == rd_src_2_lo__exec_states) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         :  1'b0;
   
   assign adr_tmp_inc = (((op == movem__op_68k00) & (exec_state == rd_src_1__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         : ((exec_state == rd_src_1_hi__exec_states) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         : ((exec_state == rd_src_1_lo__exec_states) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         : ((exec_state == rd_src_2_hi__exec_states) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         : (((op == movem__op_68k00) & (exec_state == wr_dest_1__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         : ((exec_state == wr_dest_1_hi__exec_states) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         : ((exec_state == wr_dest_1_lo__exec_states) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         : ((exec_state == wr_dest_2_hi__exec_states) & (bus_cyc_rdy == 1'b1)) ? 
                            1'b1
                         :  1'b0;
   
   assign usp_cpy = ((op == move_usp__op_68k00) & (op_end_i == 1'b1)) ? 
                        1'b1
                     :  1'b0;
   
   assign sp_add_displ = ((op == link__op_68k00) & (op_end_i == 1'b1)) ? 
                             1'b1
                          :  1'b0;
   
   assign usp_inc = (((exec_state == rd_sp__exec_states) & (bus_cyc_rdy == 1'b1)) & (sbit_i == 1'b0)) ? 
                        1'b1
                     : ((op == unlk__op_68k00) & (regsel_20 == 3'b111)) ? 
                        1'b0
                     : (((exec_state == rd_sp_hi__exec_states) & (bus_cyc_rdy == 1'b1)) & (sbit_i == 1'b0)) ? 
                        1'b1
                     : (((exec_state == rd_sp_lo__exec_states) & (bus_cyc_rdy == 1'b1)) & (sbit_i == 1'b0)) ? 
                        1'b1
                     :  1'b0;
   
   assign usp_dec = (((!(exec_state==wr_sp_hi__exec_states)) & (next_exec_state == wr_sp_hi__exec_states)) & (sbit_i == 1'b0)) ? 
                        1'b1
                     : (((!(exec_state==wr_sp_lo__exec_states)) & (next_exec_state == wr_sp_lo__exec_states)) & (sbit_i == 1'b0)) ? 
                        1'b1
                     :  1'b0;
   
   assign ssp_inc = (((exec_state == rd_sp__exec_states) & (bus_cyc_rdy == 1'b1)) & (sbit_i == 1'b1)) ? 
                        1'b1
                     : ((op == unlk__op_68k00) & (regsel_20 == 3'b111)) ? 
                        1'b0
                     : (((exec_state == rd_sp_hi__exec_states) & (bus_cyc_rdy == 1'b1)) & (sbit_i == 1'b1)) ? 
                        1'b1
                     : (((exec_state == rd_sp_lo__exec_states) & (bus_cyc_rdy == 1'b1)) & (sbit_i == 1'b1)) ? 
                        1'b1
                     :  1'b0;
   
   assign ssp_dec = (((!(exec_state==wr_sp_hi__exec_states)) & (next_exec_state == wr_sp_hi__exec_states)) & (sbit_i == 1'b1)) ? 
                        1'b1
                     : (((!(exec_state==wr_sp_lo__exec_states)) & (next_exec_state == wr_sp_lo__exec_states)) & (sbit_i == 1'b1)) ? 
                        1'b1
                     :  1'b0;
   
   assign pc_add_displ = (((op == bra__op_68k00) | (op == bsr__op_68k00)) & (op_end_i == 1'b1)) ? 
                             1'b1
                          : (((op == bcc__op_68k00) & (cond == 1'b1)) & (op_end_i == 1'b1)) ? 
                             1'b1
                          : ((((op == dbcc__op_68k00) & (op_end_i == 1'b1)) & (cond == 1'b0)) & (dbcc_cond == 1'b0)) ? 
                             1'b1
                          :  1'b0;
   
   assign pc_inc = (op_end_i == 1'b1) ? 
                       1'b1
                    :  1'b0;
   
   assign pc_tmp_clr = (exec_state == idle__exec_states) ? 
                           1'b1
                        :  1'b0;
   
   assign pc_tmp_inc = (((exec_state == fetch_biw_1__exec_states) & (bus_cyc_rdy == 1'b1)) & (next_exec_state == fetch_biw_2__exec_states)) ? 
                           1'b1
                        : (((exec_state == fetch_biw_1__exec_states) & (bus_cyc_rdy == 1'b1)) & (next_exec_state == fetch_ext__exec_states)) ? 
                           1'b1
                        : (((exec_state == fetch_biw_1__exec_states) & (bus_cyc_rdy == 1'b1)) & (next_exec_state == fetch_dest_ext__exec_states)) ? 
                           1'b1
                        : (((exec_state == fetch_biw_2__exec_states) & (bus_cyc_rdy == 1'b1)) & (next_exec_state == fetch_biw_3__exec_states)) ? 
                           1'b1
                        : (((exec_state == fetch_biw_2__exec_states) & (bus_cyc_rdy == 1'b1)) & (next_exec_state == fetch_ext__exec_states)) ? 
                           1'b1
                        : (((exec_state == fetch_biw_3__exec_states) & (bus_cyc_rdy == 1'b1)) & (next_exec_state == fetch_ext__exec_states)) ? 
                           1'b1
                        : (((exec_state == fetch_ext__exec_states) & (bus_cyc_rdy == 1'b1)) & (next_exec_state == fetch_ext__exec_states)) ? 
                           1'b1
                        : (((exec_state == fetch_ext__exec_states) & (bus_cyc_rdy == 1'b1)) & (next_exec_state == fetch_dest_ext__exec_states)) ? 
                           1'b1
                        : (((exec_state == fetch_dest_ext__exec_states) & (bus_cyc_rdy == 1'b1)) & (next_exec_state == fetch_dest_ext__exec_states)) ? 
                           1'b1
                        :  1'b0;
   
   assign pc_init = (((op == rte__op_68k00) & (exec_state == rd_sp_lo__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                        1'b1
                     : (((op == rtr__op_68k00) & (exec_state == rd_sp_lo__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                        1'b1
                     : (((op == rts__op_68k00) & (exec_state == rd_sp_lo__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                        1'b1
                     :  1'b0;
   
   assign pc_wr = (((op == jmp__op_68k00) | (op == jsr__op_68k00)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   :  1'b0;
   
   assign sr_wr = ((((op == andi_to_sr__op_68k00) | (op == eori_to_sr__op_68k00)) | (op == ori_to_sr__op_68k00)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : (((op == move_to_sr__op_68k00) | (op == rte__op_68k00)) & (op_end_i == 1'b1)) ? 
                      1'b1
                   : (((op == stop__op_68k00) & (exec_state == fetch_biw_2__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                      1'b1
                   :  1'b0;
   
   assign ccr_wr = ((((op == andi_to_ccr__op_68k00) | (op == eori_to_ccr__op_68k00)) | (op == ori_to_ccr__op_68k00)) & (op_end_i == 1'b1)) ? 
                       1'b1
                    : ((op == move_to_ccr__op_68k00) & (op_end_i == 1'b1)) ? 
                       1'b1
                    : (((op == rtr__op_68k00) & (exec_state == rd_sp__exec_states)) & (bus_cyc_rdy == 1'b1)) ? 
                       1'b1
                    :  1'b0;
   
   assign trap_chk_en = (op == chk__op_68k00) ? 
                            op_end_i
                         :  1'b0;
   
   assign reset_en = ((op == reset__op_68k00) & ((next_exec_state == wait_operation__exec_states) | (exec_state == wait_operation__exec_states))) ? 
                         1'b1
                      :  1'b0;
   
   assign updt_cc = (!(adr_mode==3'b001)) ? 
                        op_end_i
                     :  1'b0;
   
   assign  cc_updt=op==addq__op_68k00 ? updt_cc : 
           op==subq__op_68k00 ? updt_cc : 
           op==abcd__op_68k00 ? op_end_i : 
           op==add__op_68k00 ? op_end_i : 
           op==addi__op_68k00 ? op_end_i : 
           op==addx__op_68k00 ? op_end_i : 
           op==and_b__op_68k00 ? op_end_i : 
           op==andi__op_68k00 ? op_end_i : 
           op==asl__op_68k00 ? op_end_i : 
           op==asr__op_68k00 ? op_end_i : 
           op==bchg__op_68k00 ? op_end_i : 
           op==bclr__op_68k00 ? op_end_i : 
           op==bset__op_68k00 ? op_end_i : 
           op==btst__op_68k00 ? op_end_i : 
           op==chk__op_68k00 ? op_end_i : 
           op==clr__op_68k00 ? op_end_i : 
           op==cmp__op_68k00 ? op_end_i : 
           op==cmpa__op_68k00 ? op_end_i : 
           op==cmpi__op_68k00 ? op_end_i : 
           op==cmpm__op_68k00 ? op_end_i : 
           op==divs__op_68k00 ? op_end_i : 
           op==divu__op_68k00 ? op_end_i : 
           op==eor__op_68k00 ? op_end_i : 
           op==eori__op_68k00 ? op_end_i : 
           op==extw__op_68k00 ? op_end_i : 
           op==lsl__op_68k00 ? op_end_i : 
           op==lsr__op_68k00 ? op_end_i : 
           op==move__op_68k00 ? op_end_i : 
           op==moveq__op_68k00 ? op_end_i : 
           op==muls__op_68k00 ? op_end_i : 
           op==mulu__op_68k00 ? op_end_i : 
           op==nbcd__op_68k00 ? op_end_i : 
           op==neg__op_68k00 ? op_end_i : 
           op==negx__op_68k00 ? op_end_i : 
           op==not_b__op_68k00 ? op_end_i : 
           op==or_b__op_68k00 ? op_end_i : 
           op==ori__op_68k00 ? op_end_i : 
           op==rotl__op_68k00 ? op_end_i : 
           op==rotr__op_68k00 ? op_end_i : 
           op==roxl__op_68k00 ? op_end_i : 
           op==roxr__op_68k00 ? op_end_i : 
           op==sbcd__op_68k00 ? op_end_i : 
           op==sub__op_68k00 ? op_end_i : 
           op==subi__op_68k00 ? op_end_i : 
           op==subx__op_68k00 ? op_end_i : 
           op==swap__op_68k00 ? op_end_i : 
           op==tas__op_68k00 ? op_end_i : 
           op==tst__op_68k00 ? op_end_i : 
           1'b0;
   
   assign wr_hi = ((exec_state == wr_dest_1_hi__exec_states) | (exec_state == wr_dest_2_hi__exec_states)) ? 
                      1'b1
                   : (exec_state == wr_sp_hi__exec_states) ? 
                      1'b1
                   :  1'b0;
   
   assign wr_bus = wr_bus_i;
   
   assign wr_bus_i = (exec_state == wr_dest_1__exec_states) ? 
                         1'b1
                      : (exec_state == wr_dest_1_hi__exec_states) ? 
                         1'b1
                      : (exec_state == wr_dest_1_lo__exec_states) ? 
                         1'b1
                      : (exec_state == wr_dest_2_hi__exec_states) ? 
                         1'b1
                      : (exec_state == wr_dest_2_lo__exec_states) ? 
                         1'b1
                      : (exec_state == wr_sp_hi__exec_states) ? 
                         1'b1
                      : (exec_state == wr_sp_lo__exec_states) ? 
                         1'b1
                      :  1'b0;
   
   assign  rd_bus=rd_bus_i;
   
   assign  rd_bus_i=((exec_state == fetch_biw_1__exec_states) & ((ctrl_en == 1'b1) | (traplock == 1'b1))) ? 
                         1'b1
                      : (exec_state == fetch_biw_2__exec_states) ? 
                         1'b1
                      : (exec_state == fetch_biw_3__exec_states) ? 
                         1'b1
                      : (exec_state == fetch_ext__exec_states) ? 
                         1'b1
                      : (exec_state == fetch_dest_ext__exec_states) ? 
                         1'b1
                      : (exec_state == rd_src_1__exec_states) ? 
                         1'b1
                      : (exec_state == rd_src_1_hi__exec_states) ? 
                         1'b1
                      : (exec_state == rd_src_1_lo__exec_states) ? 
                         1'b1
                      : (exec_state == rd_src_2__exec_states) ? 
                         1'b1
                      : (exec_state == rd_src_2_hi__exec_states) ? 
                         1'b1
                      : (exec_state == rd_src_2_lo__exec_states) ? 
                         1'b1
                      : (exec_state == rd_sp__exec_states) ? 
                         1'b1
                      : (exec_state == rd_sp_hi__exec_states) ? 
                         1'b1
                      : (exec_state == rd_sp_lo__exec_states) ? 
                         1'b1
                      :  1'b0;
   
   always @ (negedge resetn or posedge clk ) begin 
       if ((resetn == 1'b0)) 
           begin 
               begin /* variable_assign ment  p_status_reg__sreg_mem  has moved. */ end 
               begin /* variable_assign ment  p_status_reg__sreg_mem_tmp  has moved. */ end 
           end
           
       else 
           
               begin 
                   if ((((op == rte__op_68k00) & (exec_state == rd_sp__exec_states)) & (bus_cyc_rdy == 1'b1))) 
                       p_status_reg__sreg_mem_tmp = {{{sr_ccr_in[15],sr_ccr_in[13]},sr_ccr_in[10:8]},sr_ccr_in[4:0]};
                       
                   
                   if ((init_status == 1'b1)) 
                       p_status_reg__sreg_mem[9:8] = 2'b01;
                       
                   
                   if ((preset_irq_mask == 1'b1)) 
                       p_status_reg__sreg_mem[7:5] = 3'b111;
                       
                   
                   if ((irq_save == 1'b1)) 
                       p_status_reg__sreg_mem[7:5] = irq;
                       
                   
                   if ((cc_updt == 1'b1)) 
                       p_status_reg__sreg_mem[4:0] = xnzvc_in;
                       
                   
                   if (((sr_wr == 1'b1) & (op == rte__op_68k00))) 
                       p_status_reg__sreg_mem = p_status_reg__sreg_mem_tmp;
                       
                   else if ((sr_wr == 1'b1)) 
                       p_status_reg__sreg_mem = {{{sr_ccr_in[15],sr_ccr_in[13]},sr_ccr_in[10:8]},sr_ccr_in[4:0]};
                       
                   else if ((ccr_wr == 1'b1)) 
                       p_status_reg__sreg_mem[4:0] = sr_ccr_in[4:0];
                       
                   
                   
               end
               
           
       
    end// always 
       
   always @ (resetn or clk or status_reg ) // begin 
       begin 
           if ((resetn == 1'b0)) 
               begin 
                   p_status_reg__sreg_mem = 10'b0000000000;
                   p_status_reg__sreg_mem_tmp = 10'b0000000000;
               end
               
           status_reg <= {{{{{{p_status_reg__sreg_mem[9],1'b0},p_status_reg__sreg_mem[8]},2'b00},p_status_reg__sreg_mem[7:5]},3'b000},p_status_reg__sreg_mem[4:0]};
           status_reg_out <= status_reg;
       end 
   // end always 
   
   always @ (negedge resetn or posedge clk ) begin 
       if ((resetn == 1'b0)) 
           begin 
               begin /* variable_assign ment  exword_counter__src_tmp  has moved. */ end 
               begin /* variable_assign ment  exword_counter__dest_tmp  has moved. */ end 
               begin /* variable_assign ment  exword_counter__lock  has moved. */ end 
           end
           
       else 
           
               begin 
                   if ((exec_state == fetch_biw_1__exec_states)) 
                       begin 
                           exword_counter__src_tmp = 0;
                           exword_counter__dest_tmp = 0;
                           exword_counter__lock = 1'b0;
                       end
                       
                   else if ((((exec_state == fetch_ext__exec_states) & (bus_cyc_rdy == 1'b0)) & (exword_counter__lock == 1'b0))) 
                       begin 
                           exword_counter__src_tmp = (exword_counter__src_tmp + 1);
                           exword_counter__lock = 1'b1;
                       end
                       
                   else if (((exec_state == fetch_ext__exec_states) & (bus_cyc_rdy == 1'b1))) 
                       exword_counter__lock = 1'b0;
                       
                   else if ((((exec_state == fetch_dest_ext__exec_states) & (bus_cyc_rdy == 1'b0)) & (exword_counter__lock == 1'b0))) 
                       begin 
                           exword_counter__dest_tmp = (exword_counter__dest_tmp + 1);
                           exword_counter__lock = 1'b1;
                       end
                       
                   else if (((exec_state == fetch_dest_ext__exec_states) & (bus_cyc_rdy == 1'b1))) 
                       exword_counter__lock = 1'b0;
                       
                   
                   if (((exec_state == fetch_ext__exec_states) & (exword_counter__src_tmp > 0))) 
                       ew_adr <= (exword_counter__src_tmp - 1);
                       
                   else if (((exec_state == fetch_dest_ext__exec_states) & (exword_counter__dest_tmp > 0))) 
                       ew_adr <= (exword_counter__dest_tmp - 1);
                       
                   else 
                       ew_adr <= 0;
                       
                   
                   
               end
               
           
       
    end// always 
       
   always @ (resetn or clk or ext_cnt or dest_ext_cnt or exec_state ) // begin 
       begin 
           if ((resetn == 1'b0)) 
               begin 
                   exword_counter__src_tmp = 0;
                   exword_counter__dest_tmp = 0;
                   exword_counter__lock = 1'b0;
               end
               
           if ((exword_counter__src_tmp == ext_cnt)) 
               got_ext <= 1'b1;
               
           else 
               got_ext <= 1'b0;
               
           if ((exword_counter__dest_tmp == dest_ext_cnt)) 
               got_dest_ext <= 1'b1;
               
           else 
               got_dest_ext <= 1'b0;
               
           
       end 
   // end always 
   
   always @ (negedge resetn or posedge clk ) begin 
       if ((resetn == 1'b0)) 
           begin 
               begin /* variable_assign ment  movem_ctrl__bit_pnt  has moved. */ end 
               begin /* variable_assign ment  movem_ctrl__regsel_tmp  has moved. */ end 
               movem_pi_corr <= 1'b0;
           end
           
       else 
           
               begin 
                   if ((exec_state == fetch_biw_1__exec_states)) 
                       begin 
                           movem_ctrl__bit_pnt = 0;
                           case (adr_mode)
                               3'b100 : 
                                       movem_ctrl__regsel_tmp = 3'b111;
                               default : 
                                       movem_ctrl__regsel_tmp = 3'b000;
                           endcase
                       end
                       
                   else if ((next_exec_state == movem_tst__exec_states)) 
                       begin 
                           movem_ctrl__bit_pnt = (movem_ctrl__bit_pnt + 1);
                           case (adr_mode)
                               3'b100 : 
                                       movem_ctrl__regsel_tmp = (movem_ctrl__regsel_tmp - 1'b1);
                               default : 
                                       movem_ctrl__regsel_tmp = (movem_ctrl__regsel_tmp + 1'b1);
                           endcase
                       end
                       
                   
                   case (movem_ctrl__bit_pnt)
                       16 : 
                               movem_en <= 1'b0;
                       default : 
                               movem_en <= 1'b1;
                   endcase
                   if (((movem_ctrl__bit_pnt <= 7) & (adr_mode == 3'b100))) 
                       movem_adn_i <= 1'b1;
                       
                   else if (((movem_ctrl__bit_pnt > 7) & (!(adr_mode==3'b100)))) 
                       movem_adn_i <= 1'b1;
                       
                   else 
                       movem_adn_i <= 1'b0;
                       
                   
                   if ((((((adr_mode == 3'b011) & (movem_ctrl__regsel_tmp == regsel_20)) & (movem_ctrl__bit_pnt > 7)) & (movem_ctrl__bit_pnt < 16)) & (reglistmask[movem_ctrl__bit_pnt] == 1'b1))) 
                       movem_pi_corr <= 1'b1;
                       
                   else 
                       movem_pi_corr <= 1'b0;
                       
                   
                   movem_adn <= movem_adn_i;
                   movem_regsel <= movem_ctrl__regsel_tmp;
               end
               
           
       
    end// always 
       
   always @ (resetn or clk or adr_mode or regsel_20 or movem_adn_i or dr or reglistmask ) // begin 
       begin 
           if ((resetn == 1'b0)) 
               begin 
                   movem_ctrl__bit_pnt = 0;
                   movem_ctrl__regsel_tmp = 3'b000;
                   begin /* signal_assign ment has moved. */ end 
               end
               
           if (((((adr_mode == 3'b011) & (movem_ctrl__regsel_tmp == regsel_20)) & (movem_adn_i == 1'b1)) & (dr == 1'b1))) 
               movem_cpy <= 1'b0;
               
           else 
               movem_cpy <= reglistmask[movem_ctrl__bit_pnt];
               
           
       end 
   // end always 
   
   always begin
       begin 
           @(posedge clk );
           if ((!(exec_state==fetch_biw_1__exec_states))) 
                   traplock <= 1'b0;
           else if (((exec_state == fetch_biw_1__exec_states) & (bus_cyc_rdy == 1'b1))) 
                   traplock <= 1'b0;
           else if ((exec_state == fetch_biw_1__exec_states)) 
                   traplock <= 1'b1;

           
       end
    end
   
       
   always @ (negedge resetn or posedge clk ) // begin 
           if ((resetn == 1'b0)) 
               exec_state <= idle__exec_states;
               
           else 
               
                   if (((exec_abort == 1'b1) & (bus_cyc_rdy == 1'b1))) 
                       exec_state <= idle__exec_states;
                       
                   else 
                       exec_state <= next_exec_state;
                       
                   
                   
               
           
   // end always 
   
       
   always @ (exec_state or ctrl_en or traplock or bus_cyc_rdy or force_biw2 or force_biw3 or got_ext or got_dest_ext or shft_busy or op or rm or reset_rdy or op_mode or op_size or cond or exec_resume or adr_mode or div_mul_32n64 or op_busy or status_reg or move_d_am or movem_en or movem_cpy or dr or mem_shft or dest_ext_cnt or reglistmask or regsel_20 or trap_priv ) // begin 
           case (exec_state)
               idle__exec_states : 
                       if ((ctrl_en == 1'b1)) 
                               next_exec_state <= fetch_biw_1__exec_states;
                       else 
                               next_exec_state <= idle__exec_states;

                       
               fetch_biw_1__exec_states : 
                       if (((ctrl_en == 1'b0) & (traplock == 1'b0))) 
                               next_exec_state <= idle__exec_states;
                       else if (((bus_cyc_rdy == 1'b1) & (trap_priv == 1'b1))) 
                               next_exec_state <= idle__exec_states;
                       else if (((bus_cyc_rdy == 1'b1) & (force_biw2 == 1'b1))) 
                               next_exec_state <= fetch_biw_2__exec_states;
                       else if (((bus_cyc_rdy == 1'b1) & (got_ext == 1'b0))) 
                               next_exec_state <= fetch_ext__exec_states;
                       else if (((bus_cyc_rdy == 1'b1) & (got_dest_ext == 1'b0))) 
                               next_exec_state <= fetch_dest_ext__exec_states;
                       else if ((bus_cyc_rdy == 1'b1)) 
                               case (op)
                                   reset__op_68k00 : 
                                           next_exec_state <= wait_operation__exec_states;
                                   illegal__op_68k00,unimplemented__op_68k00,reserved__op_68k00 : 
                                           next_exec_state <= idle__exec_states;
                                   trap__op_68k00,trapv__op_68k00 : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   abcd__op_68k00,sbcd__op_68k00,addx__op_68k00,subx__op_68k00 : 
                                           if ((rm == 1'b0)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else if ((op_size == long__op_sizetype)) 
                                                   next_exec_state <= rd_src_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   add__op_68k00,and_b__op_68k00,eor__op_68k00,sub__op_68k00,or_b__op_68k00 : 
                                           if (((adr_mode == 3'b000) | (adr_mode == 3'b001))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else if (((op_mode == 3'b010) | (op_mode == 3'b110))) 
                                                   next_exec_state <= rd_src_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   adda__op_68k00,cmpa__op_68k00,suba__op_68k00 : 
                                           if (((adr_mode == 3'b000) | (adr_mode == 3'b001))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else if ((op_mode == 3'b111)) 
                                                   next_exec_state <= rd_src_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   asl__op_68k00,asr__op_68k00,lsl__op_68k00,lsr__op_68k00,rotl__op_68k00,rotr__op_68k00,roxl__op_68k00,roxr__op_68k00 : 
                                           if ((mem_shft == 1'b0)) 
                                                   next_exec_state <= wait_operation__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   bcc__op_68k00,bra__op_68k00,exg__op_68k00,extw__op_68k00,jmp__op_68k00,lea__op_68k00,moveq__op_68k00,move_usp__op_68k00,nop__op_68k00,swap__op_68k00 : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   bchg__op_68k00,bclr__op_68k00,bset__op_68k00,btst__op_68k00 : 
                                           if ((adr_mode == 3'b000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   bsr__op_68k00,jsr__op_68k00,pea__op_68k00 : 
                                           next_exec_state <= wr_sp_lo__exec_states;
                                   chk__op_68k00,neg__op_68k00,negx__op_68k00,not_b__op_68k00 : 
                                           if ((adr_mode == 3'b000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else if ((op_size == long__op_sizetype)) 
                                                   next_exec_state <= rd_src_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   clr__op_68k00 : 
                                           if ((adr_mode == 3'b000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else if ((op_size == long__op_sizetype)) 
                                                   next_exec_state <= wr_dest_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= wr_dest_1__exec_states;

                                           
                                   cmp__op_68k00 : 
                                           if (((adr_mode == 3'b000) | (adr_mode == 3'b001))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else if ((op_mode == 3'b010)) 
                                                   next_exec_state <= rd_src_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   cmpm__op_68k00 : 
                                           if ((op_size == long__op_sizetype)) 
                                                   next_exec_state <= rd_src_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   divs__op_68k00,divu__op_68k00,muls__op_68k00,mulu__op_68k00 : 
                                           if ((adr_mode == 3'b000)) 
                                                   next_exec_state <= wait_operation__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   move__op_68k00 : 
                                           if ((((adr_mode == 3'b000) | (adr_mode == 3'b001)) & (move_d_am == 3'b000))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else if (((adr_mode == 3'b001) | (adr_mode == 3'b000))) 
                                               begin 
                                                       if ((op_size == long__op_sizetype)) 
                                                               next_exec_state <= wr_dest_1_hi__exec_states;
                                                       else 
                                                               next_exec_state <= wr_dest_1__exec_states;

                                                       
                                               end 
                                           else 
                                               begin 
                                                       if ((op_size == long__op_sizetype)) 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       else 
                                                               next_exec_state <= rd_src_1__exec_states;

                                                       
                                               end 

                                           
                                   movea__op_68k00 : 
                                           if (((adr_mode == 3'b000) | (adr_mode == 3'b001))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   case (op_size)
                                                       long__op_sizetype : 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       default : 
                                                               next_exec_state <= rd_src_1__exec_states;
                                                   endcase

                                           
                                   move_from_ccr__op_68k00,move_from_sr__op_68k00,scc__op_68k00 : 
                                           if ((adr_mode == 3'b000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   next_exec_state <= wr_dest_1__exec_states;

                                           
                                   nbcd__op_68k00,move_to_ccr__op_68k00,move_to_sr__op_68k00,tas__op_68k00 : 
                                           if ((adr_mode == 3'b000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   rte__op_68k00,rtr__op_68k00 : 
                                           next_exec_state <= rd_sp__exec_states;
                                   rts__op_68k00 : 
                                           next_exec_state <= rd_sp_hi__exec_states;
                                   addq__op_68k00,subq__op_68k00,tst__op_68k00 : 
                                           if (((adr_mode == 3'b000) | (adr_mode == 3'b001))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                               begin 
                                                       if ((op_size == long__op_sizetype)) 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       else 
                                                               next_exec_state <= rd_src_1__exec_states;

                                                       
                                               end 

                                           
                                   unlk__op_68k00 : 
                                           next_exec_state <= rd_sp_hi__exec_states;
                                   default : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                               endcase
                       else 
                               next_exec_state <= fetch_biw_1__exec_states;

                       
               fetch_biw_2__exec_states : 
                       if (((bus_cyc_rdy == 1'b1) & (force_biw3 == 1'b1))) 
                               next_exec_state <= fetch_biw_3__exec_states;
                       else if (((bus_cyc_rdy == 1'b1) & (got_ext == 1'b0))) 
                               next_exec_state <= fetch_ext__exec_states;
                       else if ((bus_cyc_rdy == 1'b1)) 
                               case (op)
                                   addi__op_68k00,andi__op_68k00,cmpi__op_68k00,eori__op_68k00,ori__op_68k00,subi__op_68k00 : 
                                           if ((adr_mode == 3'b000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   case (op_size)
                                                       long__op_sizetype : 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       default : 
                                                               next_exec_state <= rd_src_1__exec_states;
                                                   endcase

                                           
                                   bcc__op_68k00,bra__op_68k00 : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   andi_to_sr__op_68k00,andi_to_ccr__op_68k00,eori_to_sr__op_68k00,eori_to_ccr__op_68k00,ori_to_ccr__op_68k00,ori_to_sr__op_68k00 : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   bchg__op_68k00,bclr__op_68k00,bset__op_68k00,btst__op_68k00 : 
                                           if ((adr_mode == 3'b000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   bsr__op_68k00,link__op_68k00 : 
                                           next_exec_state <= wr_sp_lo__exec_states;
                                   dbcc__op_68k00 : 
                                           if ((cond == 1'b1)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   next_exec_state <= wait_operation__exec_states;

                                           
                                   divs__op_68k00,divu__op_68k00,muls__op_68k00,mulu__op_68k00 : 
                                           if ((adr_mode == 3'b000)) 
                                                   next_exec_state <= wait_operation__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1_hi__exec_states;

                                           
                                   movem__op_68k00 : 
                                           if ((reglistmask == 16'h0000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else if ((((movem_cpy == 1'b1) & (op_size == long__op_sizetype)) & (dr == 1'b1))) 
                                                   next_exec_state <= rd_src_1_hi__exec_states;
                                           else if (((movem_cpy == 1'b1) & (op_size == long__op_sizetype))) 
                                                   next_exec_state <= wr_dest_1_hi__exec_states;
                                           else if (((movem_cpy == 1'b1) & (dr == 1'b1))) 
                                                   next_exec_state <= rd_src_1__exec_states;
                                           else if ((movem_cpy == 1'b1)) 
                                                   next_exec_state <= wr_dest_1__exec_states;
                                           else 
                                                   next_exec_state <= movem_tst__exec_states;

                                           
                                   movep__op_68k00 : 
                                           if ((op_mode == 3'b101)) 
                                                   next_exec_state <= rd_src_1_hi__exec_states;
                                           else if ((op_mode == 3'b100)) 
                                                   next_exec_state <= rd_src_2_hi__exec_states;
                                           else if ((op_mode == 3'b111)) 
                                                   next_exec_state <= wr_dest_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= wr_dest_2_hi__exec_states;

                                           
                                   stop__op_68k00 : 
                                           if ((status_reg[15] == 1'b1)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   next_exec_state <= wait_operation__exec_states;

                                           
                                   default : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                               endcase
                       else 
                               next_exec_state <= fetch_biw_2__exec_states;

                       
               fetch_biw_3__exec_states : 
                       if (((bus_cyc_rdy == 1'b1) & (got_ext == 1'b0))) 
                               next_exec_state <= fetch_ext__exec_states;
                       else if ((bus_cyc_rdy == 1'b1)) 
                               case (op)
                                   addi__op_68k00,andi__op_68k00,cmpi__op_68k00,eori__op_68k00,ori__op_68k00,subi__op_68k00 : 
                                           if ((adr_mode == 3'b000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   case (op_size)
                                                       long__op_sizetype : 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       default : 
                                                               next_exec_state <= rd_src_1__exec_states;
                                                   endcase

                                           
                                   bcc__op_68k00,bra__op_68k00 : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   bsr__op_68k00,link__op_68k00 : 
                                           next_exec_state <= wr_sp_lo__exec_states;
                                   default : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                               endcase
                       else 
                               next_exec_state <= fetch_biw_3__exec_states;

                       
               fetch_ext__exec_states : 
                       if ((((bus_cyc_rdy == 1'b1) & (got_ext == 1'b1)) & (got_dest_ext == 1'b0))) 
                               next_exec_state <= fetch_dest_ext__exec_states;
                       else if (((bus_cyc_rdy == 1'b1) & (got_ext == 1'b1))) 
                               case (op)
                                   add__op_68k00,and_b__op_68k00,sub__op_68k00,or_b__op_68k00 : 
                                           if (((adr_mode == 3'b111) & (regsel_20 == 3'b100))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                               begin 
                                                       if (((op_mode == 3'b010) | (op_mode == 3'b110))) 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       else 
                                                               next_exec_state <= rd_src_1__exec_states;

                                                       
                                               end 

                                           
                                   eor__op_68k00 : 
                                           if (((op_mode == 3'b010) | (op_mode == 3'b110))) 
                                                   next_exec_state <= rd_src_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   adda__op_68k00,cmpa__op_68k00,suba__op_68k00 : 
                                           if (((adr_mode == 3'b111) & (regsel_20 == 3'b100))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                               begin 
                                                       if ((op_mode == 3'b111)) 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       else 
                                                               next_exec_state <= rd_src_1__exec_states;

                                                       
                                               end 

                                           
                                   addi__op_68k00,addq__op_68k00,andi__op_68k00,cmpi__op_68k00,eori__op_68k00,neg__op_68k00,negx__op_68k00,not_b__op_68k00,ori__op_68k00,subi__op_68k00,subq__op_68k00 : 
                                           case (op_size)
                                               long__op_sizetype : 
                                                       next_exec_state <= rd_src_1_hi__exec_states;
                                               default : 
                                                       next_exec_state <= rd_src_1__exec_states;
                                           endcase
                                   asl__op_68k00,asr__op_68k00,lsl__op_68k00,lsr__op_68k00,rotl__op_68k00,rotr__op_68k00,roxl__op_68k00,roxr__op_68k00 : 
                                           next_exec_state <= rd_src_1__exec_states;
                                   btst__op_68k00,move_to_ccr__op_68k00,move_to_sr__op_68k00 : 
                                           if (((adr_mode == 3'b111) & (regsel_20 == 3'b100))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   next_exec_state <= rd_src_1__exec_states;

                                           
                                   bchg__op_68k00,bclr__op_68k00,bset__op_68k00 : 
                                           next_exec_state <= rd_src_1__exec_states;
                                   chk__op_68k00,movea__op_68k00,tst__op_68k00 : 
                                           if (((adr_mode == 3'b111) & (regsel_20 == 3'b100))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   case (op_size)
                                                       long__op_sizetype : 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       default : 
                                                               next_exec_state <= rd_src_1__exec_states;
                                                   endcase

                                           
                                   divs__op_68k00,divu__op_68k00,muls__op_68k00,mulu__op_68k00 : 
                                           if (((adr_mode == 3'b111) & (regsel_20 == 3'b100))) 
                                                   next_exec_state <= wait_operation__exec_states;
                                           else 
                                                   case (op_size)
                                                       long__op_sizetype : 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       default : 
                                                               next_exec_state <= rd_src_1__exec_states;
                                                   endcase

                                           
                                   clr__op_68k00 : 
                                           if ((op_size == long__op_sizetype)) 
                                                   next_exec_state <= wr_dest_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= wr_dest_1__exec_states;

                                           
                                   cmp__op_68k00 : 
                                           if (((adr_mode == 3'b111) & (regsel_20 == 3'b100))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                               begin 
                                                       if ((op_mode == 3'b010)) 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       else 
                                                               next_exec_state <= rd_src_1__exec_states;

                                                       
                                               end 

                                           
                                   move__op_68k00 : 
                                           if ((((adr_mode == 3'b111) & (regsel_20 == 3'b100)) & (move_d_am == 3'b000))) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else if (((adr_mode == 3'b111) & (regsel_20 == 3'b100))) 
                                                   case (op_size)
                                                       long__op_sizetype : 
                                                               next_exec_state <= wr_dest_1_hi__exec_states;
                                                       default : 
                                                               next_exec_state <= wr_dest_1__exec_states;
                                                   endcase
                                           else 
                                                   case (op_size)
                                                       long__op_sizetype : 
                                                               next_exec_state <= rd_src_1_hi__exec_states;
                                                       default : 
                                                               next_exec_state <= rd_src_1__exec_states;
                                                   endcase

                                           
                                   movem__op_68k00 : 
                                           if ((reglistmask == 16'h0000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else if ((((movem_cpy == 1'b1) & (op_size == long__op_sizetype)) & (dr == 1'b1))) 
                                                   next_exec_state <= rd_src_1_hi__exec_states;
                                           else if (((movem_cpy == 1'b1) & (op_size == long__op_sizetype))) 
                                                   next_exec_state <= wr_dest_1_hi__exec_states;
                                           else if (((movem_cpy == 1'b1) & (dr == 1'b1))) 
                                                   next_exec_state <= rd_src_1__exec_states;
                                           else if ((movem_cpy == 1'b1)) 
                                                   next_exec_state <= wr_dest_1__exec_states;
                                           else 
                                                   next_exec_state <= movem_tst__exec_states;

                                           
                                   move_from_ccr__op_68k00,move_from_sr__op_68k00,scc__op_68k00 : 
                                           next_exec_state <= wr_dest_1__exec_states;
                                   nbcd__op_68k00,tas__op_68k00 : 
                                           next_exec_state <= rd_src_1__exec_states;
                                   jmp__op_68k00,lea__op_68k00 : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   jsr__op_68k00,pea__op_68k00 : 
                                           next_exec_state <= wr_sp_lo__exec_states;
                                   default : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                               endcase
                       else 
                               next_exec_state <= fetch_ext__exec_states;

                       
               fetch_dest_ext__exec_states : 
                       if (((bus_cyc_rdy == 1'b1) & (got_dest_ext == 1'b1))) 
                           begin 
                                   if ((((adr_mode == 3'b000) | (adr_mode == 3'b001)) | ((adr_mode == 3'b111) & (regsel_20 == 3'b100)))) 
                                       begin 
                                               if ((op_size == long__op_sizetype)) 
                                                       next_exec_state <= wr_dest_1_hi__exec_states;
                                               else 
                                                       next_exec_state <= wr_dest_1__exec_states;

                                               
                                       end 
                                   else 
                                       begin 
                                               if ((op_size == long__op_sizetype)) 
                                                       next_exec_state <= rd_src_1_hi__exec_states;
                                               else 
                                                       next_exec_state <= rd_src_1__exec_states;

                                               
                                       end 

                                   
                           end 
                       else 
                               next_exec_state <= fetch_dest_ext__exec_states;

                       
               rd_src_1__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               case (op)
                                   abcd__op_68k00,sbcd__op_68k00,addx__op_68k00,subx__op_68k00,cmpm__op_68k00 : 
                                           next_exec_state <= rd_src_2__exec_states;
                                   add__op_68k00,and_b__op_68k00,sub__op_68k00,or_b__op_68k00 : 
                                           if (((op_mode == 3'b100) | (op_mode == 3'b101))) 
                                                   next_exec_state <= wr_dest_1__exec_states;
                                           else 
                                                   next_exec_state <= fetch_biw_1__exec_states;

                                           
                                   move__op_68k00 : 
                                           if ((move_d_am == 3'b000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   next_exec_state <= wr_dest_1__exec_states;

                                           
                                   addi__op_68k00,addq__op_68k00,andi__op_68k00,eor__op_68k00,eori__op_68k00,neg__op_68k00,negx__op_68k00,not_b__op_68k00,ori__op_68k00,subi__op_68k00,subq__op_68k00 : 
                                           next_exec_state <= wr_dest_1__exec_states;
                                   adda__op_68k00,suba__op_68k00,btst__op_68k00,chk__op_68k00,cmp__op_68k00,cmpa__op_68k00,cmpi__op_68k00,movea__op_68k00,move_to_ccr__op_68k00,move_to_sr__op_68k00,tst__op_68k00 : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   asl__op_68k00,asr__op_68k00,lsl__op_68k00,lsr__op_68k00,rotl__op_68k00,rotr__op_68k00,roxl__op_68k00,roxr__op_68k00 : 
                                           next_exec_state <= wait_operation__exec_states;
                                   bchg__op_68k00,bclr__op_68k00,bset__op_68k00,nbcd__op_68k00,tas__op_68k00 : 
                                           next_exec_state <= wr_dest_1__exec_states;
                                   divs__op_68k00,divu__op_68k00,muls__op_68k00,mulu__op_68k00 : 
                                           next_exec_state <= wait_operation__exec_states;
                                   movem__op_68k00 : 
                                           next_exec_state <= movem_tst__exec_states;
                                   default : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                               endcase
                       else 
                               next_exec_state <= rd_src_1__exec_states;

                       
               rd_src_1_hi__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= rd_src_1_lo__exec_states;
                       else 
                               next_exec_state <= rd_src_1_hi__exec_states;

                       
               rd_src_1_lo__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               case (op)
                                   addi__op_68k00,addq__op_68k00,andi__op_68k00,eor__op_68k00,eori__op_68k00,neg__op_68k00,negx__op_68k00,not_b__op_68k00,subi__op_68k00,subq__op_68k00,ori__op_68k00 : 
                                           next_exec_state <= wr_dest_1_hi__exec_states;
                                   add__op_68k00,and_b__op_68k00,sub__op_68k00,or_b__op_68k00 : 
                                           if ((op_mode == 3'b110)) 
                                                   next_exec_state <= wr_dest_1_hi__exec_states;
                                           else 
                                                   next_exec_state <= fetch_biw_1__exec_states;

                                           
                                   move__op_68k00 : 
                                           if ((move_d_am == 3'b000)) 
                                                   next_exec_state <= fetch_biw_1__exec_states;
                                           else 
                                                   next_exec_state <= wr_dest_1_hi__exec_states;

                                           
                                   adda__op_68k00,chk__op_68k00,cmp__op_68k00,cmpa__op_68k00,cmpi__op_68k00,movea__op_68k00,suba__op_68k00,tst__op_68k00 : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   addx__op_68k00,subx__op_68k00,cmpm__op_68k00,movep__op_68k00 : 
                                           next_exec_state <= rd_src_2_hi__exec_states;
                                   divs__op_68k00,divu__op_68k00,muls__op_68k00,mulu__op_68k00 : 
                                           next_exec_state <= wait_operation__exec_states;
                                   movem__op_68k00 : 
                                           next_exec_state <= movem_tst__exec_states;
                                   default : 
                                           next_exec_state <= fetch_biw_1__exec_states;
                               endcase
                       else 
                               next_exec_state <= rd_src_1_lo__exec_states;

                       
               rd_src_2__exec_states : 
                       if (((op == cmpm__op_68k00) & (bus_cyc_rdy == 1'b1))) 
                               next_exec_state <= fetch_biw_1__exec_states;
                       else if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= wr_dest_1__exec_states;
                       else 
                               next_exec_state <= rd_src_2__exec_states;

                       
               rd_src_2_hi__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= rd_src_2_lo__exec_states;
                       else 
                               next_exec_state <= rd_src_2_hi__exec_states;

                       
               rd_src_2_lo__exec_states : 
                       if ((((op == addx__op_68k00) | (op == subx__op_68k00)) & (bus_cyc_rdy == 1'b1))) 
                               next_exec_state <= wr_dest_1_hi__exec_states;
                       else if ((((op == cmpm__op_68k00) | (op == movep__op_68k00)) & (bus_cyc_rdy == 1'b1))) 
                               next_exec_state <= fetch_biw_1__exec_states;
                       else 
                               next_exec_state <= rd_src_2_lo__exec_states;

                       
               wr_dest_1__exec_states : 
                       if (((op == movem__op_68k00) & (bus_cyc_rdy == 1'b1))) 
                               next_exec_state <= movem_tst__exec_states;
                       else if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= fetch_biw_1__exec_states;
                       else 
                               next_exec_state <= wr_dest_1__exec_states;

                       
               wr_dest_1_hi__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= wr_dest_1_lo__exec_states;
                       else 
                               next_exec_state <= wr_dest_1_hi__exec_states;

                       
               wr_dest_1_lo__exec_states : 
                       if (((op == movep__op_68k00) & (bus_cyc_rdy == 1'b1))) 
                               next_exec_state <= wr_dest_2_hi__exec_states;
                       else if (((op == movem__op_68k00) & (bus_cyc_rdy == 1'b1))) 
                               next_exec_state <= movem_tst__exec_states;
                       else if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= fetch_biw_1__exec_states;
                       else 
                               next_exec_state <= wr_dest_1_lo__exec_states;

                       
               wr_dest_2_hi__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= wr_dest_2_lo__exec_states;
                       else 
                               next_exec_state <= wr_dest_2_hi__exec_states;

                       
               wr_dest_2_lo__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= fetch_biw_1__exec_states;
                       else 
                               next_exec_state <= wr_dest_2_lo__exec_states;

                       
               rd_sp__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= rd_sp_hi__exec_states;
                       else 
                               next_exec_state <= rd_sp__exec_states;

                       
               rd_sp_hi__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= rd_sp_lo__exec_states;
                       else 
                               next_exec_state <= rd_sp_hi__exec_states;

                       
               rd_sp_lo__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= fetch_biw_1__exec_states;
                       else 
                               next_exec_state <= rd_sp_lo__exec_states;

                       
               wr_sp_lo__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= wr_sp_hi__exec_states;
                       else 
                               next_exec_state <= wr_sp_lo__exec_states;

                       
               wr_sp_hi__exec_states : 
                       if ((bus_cyc_rdy == 1'b1)) 
                               next_exec_state <= fetch_biw_1__exec_states;
                       else 
                               next_exec_state <= wr_sp_hi__exec_states;

                       
               wait_operation__exec_states : 
                       case (op)
                           reset__op_68k00 : 
                                   if ((reset_rdy == 1'b1)) 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   else 
                                           next_exec_state <= wait_operation__exec_states;

                                   
                           stop__op_68k00 : 
                                   if ((exec_resume == 1'b1)) 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   else 
                                           next_exec_state <= wait_operation__exec_states;

                                   
                           asl__op_68k00,asr__op_68k00,lsl__op_68k00,lsr__op_68k00,rotl__op_68k00,rotr__op_68k00,roxl__op_68k00,roxr__op_68k00 : 
                                   if ((shft_busy == 1'b1)) 
                                           next_exec_state <= wait_operation__exec_states;
                                   else if ((mem_shft == 1'b0)) 
                                           next_exec_state <= fetch_biw_1__exec_states;
                                   else 
                                           next_exec_state <= wr_dest_1__exec_states;

                                   
                           divs__op_68k00,divu__op_68k00,muls__op_68k00,mulu__op_68k00 : 
                                   if ((op_busy == 1'b1)) 
                                           next_exec_state <= wait_operation__exec_states;
                                   else 
                                           next_exec_state <= fetch_biw_1__exec_states;

                                   
                           dbcc__op_68k00 : 
                                   next_exec_state <= fetch_biw_1__exec_states;
                           default : 
                                   next_exec_state <= fetch_biw_1__exec_states;
                       endcase
               movem_tst__exec_states : 
                       if ((movem_en == 1'b0)) 
                               next_exec_state <= fetch_biw_1__exec_states;
                       else if ((((movem_cpy == 1'b1) & (op_size == long__op_sizetype)) & (dr == 1'b1))) 
                               next_exec_state <= rd_src_1_hi__exec_states;
                       else if (((movem_cpy == 1'b1) & (op_size == long__op_sizetype))) 
                               next_exec_state <= wr_dest_1_hi__exec_states;
                       else if (((movem_cpy == 1'b1) & (dr == 1'b1))) 
                               next_exec_state <= rd_src_1__exec_states;
                       else if ((movem_cpy == 1'b1)) 
                               next_exec_state <= wr_dest_1__exec_states;
                       else 
                               next_exec_state <= movem_tst__exec_states;

                       
           endcase
   // end always 
    

endmodule
//--------------------------------------------------------------------
//--                                                              ----
//-- MC68000 compatible IP Core					                  ----
//--                                                              ----
//-- This file is part of the SUSKA ATARI clone project.          ----
//-- http://www.experiment-s.de                                   ----
//--                                                              ----
//-- Description:                                                 ----
//-- This model provides an opcode and bus timing compatible ip   ----
//-- core compared to Motorola's MC68000 microprocessor.          ----
//--                                                              ----
//-- This file is the package file of the ip core.                ----
//--                                                              ----
//--                                                              ----
//--                                                              ----
//--                                                              ----
//-- Author(s):                                                   ----
//-- - Wolfgang Foerster, wf@experiment-s.de; wf@inventronik.de   ----
//--                                                              ----
//-- Copyright (C) 2006 - 2011 Wolfgang Foerster                  ----
//--                                                              ----
//-- This source file is free software; you can redistribute it   ----
//-- and/or modify it under the terms of the GNU General Public   ----
//-- License as published by the Free Software Foundation; either ----
//-- version 2 of the License, or (at your option) any later      ----
//-- version.                                                     ----
//--                                                              ----
//-- This program is distributed in the hope that it will be      ----
//-- useful, but WITHOUT ANY WARRANTY; without even the implied   ----
//-- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      ----
//-- PURPOSE.  See the GNU General Public License for more        ----
//-- details.                                                     ----
//--                                                              ----
//-- You should have received a copy of the GNU General Public    ----
//-- License along with this program; if not, write to the Free   ----
//-- Software Foundation, Inc., 51 Franklin Street, Fifth Floor,  ----
//-- Boston, MA 02110-1301, USA.                                  ----
//--                                                              ----
//--------------------------------------------------------------------
// 
// Revision History
// 
// Revision 2K6B  2006/12/24 WF
//   Initial Release.
// Revision 2K7A  2007/05/31 WF
//   Updated all modules.
// Revision 2K8A  2008/07/14 WF
//   See the 68K00 top level file.
// Revision 2K8B  2008/12/24 WF
//   See the 68K00 top level file.
// 

